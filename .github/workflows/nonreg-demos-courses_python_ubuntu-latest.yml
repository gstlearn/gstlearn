name: nonreg-demos-courses_python_ubuntu-latest

on:
  # Permit calling the workflow from outside (https://github.com/actions/runner/discussions/1884)
  workflow_call:
  # Activate the workflow at each push on dev branch
  #push:
  #  branches: [ dev ]
  # Activate the workflow at each pull request on dev branch
  #pull_request:
  #  branches: [ dev ]
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''

env:
  CMAKE_BUILD_TYPE : Release
  BUILD_DIR : build
  PYTHON_VERSION : "3.13"
  SCCACHE_IDLE_TIMEOUT: 0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo apt-get install -yq \
          libhdf5-dev \
          libsuitesparse-dev \
          libopenmpi-dev \
          libboost-dev \
          libeigen3-dev \
          libnlopt-dev \
          libpng-dev \
          pandoc

    - name: Setup uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{env.PYTHON_VERSION}}
        activate-environment: true

    - name: Install Python dependencies
      run: |
        uv pip install --upgrade pip
        uv pip install numpy
        uv pip install jupyter
        uv pip install notebook==6.1.6
        uv pip install matplotlib
        uv pip install plotly
        uv pip install pandas
        uv pip install scipy
        uv pip install dash
        uv pip install scikit-sparse

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Configure build directory for python package
      run: |
        cmake \
          -B${{ env.BUILD_DIR }} \
          -DBUILD_TESTING=ON \
          -DBUILD_PYTHON=ON
      env:
        SCCACHE_GHA_ENABLED: "true"
        CMAKE_CC_COMPILER_LAUNCHER: sccache
        CMAKE_CXX_COMPILER_LAUNCHER: sccache

    - name: Build and Install the package
      run: |
        cmake --build ${{env.BUILD_DIR}} --parallel 3 --target python_build

    #- run: curl -sSf https://sshx.io/get | sh -s run

    - name: Execute Python demos and courses
      run: |
        cmake --build ${{env.BUILD_DIR}} --parallel 3 --target check_ipynb

    - name: Compress output logs
      if: success() || failure()
      run: |
        cd ${{env.BUILD_DIR}}/tests
        find . -type f \( -name "*.asciidoc" \) -print0 | tar -czvf demos-courses-python-logs.tar.gz --null -T -

    - name: Publish output logs as artefact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: demos-courses-python-logs
        path: ${{env.BUILD_DIR}}/tests/demos-courses-python-logs.tar.gz
