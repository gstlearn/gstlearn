name: nonreg-tests_macos-latest

on:
  # Permit calling trigger
  workflow_call:
  # Activate the workflow at each push on dev branch
  #push:
  #  branches: [ dev ]
  # Activate the workflow at each pull request on dev branch
  #pull_request:
  #  branches: [ dev ]
  # Activate the workflow every day at 23:30 UTC = for Paris 00:30 (summer) or 01:30 (winter)
  #schedule:
  #  # * is a special character in YAML so you have to quote the string
  #  - cron:  '30 23 * * *'
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR : build
  PYTHON_VERSION : "3.11"
  NUMPY_VERSION : "1.23.5"
  R_VERSION : "4.3.2"
  SWIG_ROOT : ${{github.workspace}}/swig_420b
  BOOST_ROOT: ${{github.workspace}}/boost
  BOOST_VERSION: "1.72.0"
  EIGEN_ROOT : ${{github.workspace}}/eigen
  EIGEN_VERSION : "3.4.0"

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name : Download and install dependencies
      run: brew install llvm

#    - name: Setup Python Version
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{env.PYTHON_VERSION}}
#
#    - name: Install Python dependencies
#      run: |
#        python -m pip install --upgrade pip
#        python -m pip install numpy==${{env.NUMPY_VERSION}}
##        python -m pip install pandas scipy mlxtend
#
#    - name: Setup R Version
#      uses: r-lib/actions/setup-r@v2
#      with:
#        r-version: ${{env.R_VERSION}}
#
#    - name: Compile and install [customized] SWIG 4.2.0
#      run: |
#        mkdir swig_src
#        cd swig_src
#        git clone https://github.com/fabien-ors/swig.git
#        cd swig
#        cmake -Bbuild -DCMAKE_INSTALL_PREFIX:PATH=${{env.SWIG_ROOT}} -DCMAKE_BUILD_TYPE:STRING=Release 
#        cd build
#        make
#        make install

#    # TODO : factorize boost installation action
#    - name : Download and uncompressed Boost headers
#      run: |
#        mkdir ${{env.BOOST_ROOT}}
#        curl --progress-bar --location --output ${{env.BOOST_ROOT}}/download.tar.bz2 ${{env.BOOST_URL}}
#        7z -o${{env.BOOST_ROOT}} x ${{env.BOOST_ROOT}}/download.tar.bz2 -y -bd
#        7z -o${{env.BOOST_ROOT}} x ${{env.BOOST_ROOT}}/download.tar -y -bd
#        cd ${{env.BOOST_ROOT}} && cp -r boost_*/* .
    - name: Install the Boost headers
      uses: ./.github/workflows/install-boost-unix
      with:
        boost-root: ${{env.BOOST_ROOT}}
        boost-version: ${{env.BOOST_VERSION}}

#    # TODO : factorize eigen3 installation action
#    - name : Download and uncompressed Eigen headers
#      run: |
#        mkdir ${{env.EIGEN_ROOT}}
#        curl --progress-bar --location --output ${{env.EIGEN_ROOT}}/download.zip ${{env.EIGEN_URL}}
#        7z -o${{env.EIGEN_ROOT}} x ${{env.EIGEN_ROOT}}/download.zip -y -bd
#        cd ${{env.EIGEN_ROOT}} && cp -r eigen-*/* .
    - name: Install the Eigen headers
      uses: ./.github/workflows/install-eigen-unix
      with:
        eigen-root: ${{env.EIGEN_ROOT}}
        eigen-version: ${{env.EIGEN_VERSION}}
        generator: "Unix Makefiles"

    - name: Configure CMake
      #run: CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_PYTHON=ON -DBUILD_R=ON -DSWIG_EXECUTABLE=${{env.SWIG_ROOT}}/bin/swig -DUSE_HDF5=OFF -DEigen3_ROOT=${{env.EIGEN_ROOT}} -DBoost_ROOT=${{env.BOOST_ROOT}}
      run: CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_PYTHON=OFF -DBUILD_R=OFF -DUSE_HDF5=OFF -DEigen3_ROOT=${{env.EIGEN_ROOT}} -DBoost_ROOT=${{env.BOOST_ROOT}}

    - name: Compile, install packages and execute non-regression tests
      #run: cmake --build ${{env.BUILD_DIR}} --target check -- -j 3
      run: cmake --build ${{env.BUILD_DIR}} --target check_cpp -- -j 3