name: nonreg-tests_ubuntu-latest

on:
  # Permit calling trigger
  workflow_call:
  # Activate the workflow at each push on dev branch
  #push:
  #  branches: [ dev ]
  # Activate the workflow at each pull request on dev branch
  #pull_request:
  #  branches: [ dev ]
  # Activate the workflow every day at 23:30 UTC = for Paris 00:30 (summer) or 01:30 (winter)
  #schedule:
  #  # * is a special character in YAML so you have to quote the string
  #  - cron:  '30 23 * * *'
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR : build
  PYTHON_VERSION : "3.11"
  NUMPY_VERSION : "1.23.5"
  R_VERSION : "4.3.2"
  SWIG_ROOT : ${{github.workspace}}/swig_420b
  BOOST_ROOT: ${{github.workspace}}/boost
  BOOST_VERSION: "1.72.0"
  EIGEN_ROOT : ${{github.workspace}}/eigen
  EIGEN_VERSION : "3.4.0"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo apt-get install -yq libhdf5-dev
        sudo apt-get install -yq libopenmpi-dev

    - name: Install the Boost headers
      uses: ./.github/workflows/install-boost-unix
      with:
        boost-root: ${{env.BOOST_ROOT}}
        boost-version: ${{env.BOOST_VERSION}}

    - name: Install the Eigen headers
      uses: ./.github/workflows/install-eigen-unix
      with:
        eigen-root: ${{env.EIGEN_ROOT}}
        eigen-version: ${{env.EIGEN_VERSION}}
        generator: "Unix Makefiles"

    - name: Setup Python Version
      uses: actions/setup-python@v4
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy==${{env.NUMPY_VERSION}}
        python -m pip install pandas scipy mlxtend

    - name: Setup R Version
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{env.R_VERSION}}

    - name: Install the customized SWIG from source
      uses: fabien-ors/install-swig-unix-action@v1
      with:
        swig-root: ${{env.SWIG_ROOT}}
        generator: "Unix Makefiles"

    - name: ls HOME
      run: ls $HOME

    - name: Configure CMake
      run: cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_PYTHON=ON -DBUILD_R=ON -DSWIG_EXECUTABLE=${{env.SWIG_ROOT}}/bin/swig -DEigen3_ROOT=${{env.EIGEN_ROOT}} -DBoost_ROOT=${{env.BOOST_ROOT}}

    - name: Compile, install packages and execute non-regression tests
      run: cmake --build ${{env.BUILD_DIR}} --target check -- -j 3

    - name: Compress output logs
      if: always()
      run: |
        cd ${{env.BUILD_DIR}}/tests
        find . -type f -name "*.out" -print0 | tar -czvf ubuntu-logs.tar.gz --null -T -

    - name: Publish output logs as artefact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-nonreg-logs
        path: ${{env.BUILD_DIR}}/tests/ubuntu-logs.tar.gz

    - name: Compress neutral files
      if: always()
      run: |
        cd $HOME/gstlearn_dir
        find . -type f -name "*.*" -print0 | tar -czvf ubuntu-neutral.tar.gz --null -T -
        ls $HOME/gstlearn_dir/

    - name: Publish output neutral files as artefact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-neutral-files
        path: $HOME/gstlearn_dir/ubuntu-neutral.tar.gz

