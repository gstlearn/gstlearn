name: publish_r_windows-2019

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''

env:
  # Customize the CMake build type here (Release, Debug)
  BUILD_TYPE: Release
  BUILD_DIR : build
  SWIG_ROOT  : ${{github.workspace}}/swig_420b
  PCRE2_ROOT : ${{github.workspace}}/pcre2
  BISON_ROOT : ${{github.workspace}}/bison
  BOOST_ROOT : ${{github.workspace}}/boost
  BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download

jobs:
  
  build:
    runs-on: windows-2019
    strategy :
      matrix:
        # Last release from here https://cran.r-project.org/src/base/R-4/
        r_version: ["4.0.5","4.1.3","4.2.3","4.3.0"]
        
    steps:
    - uses: actions/checkout@v3

    - name: Setup R Version
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{matrix.r_version}}

    - name: Install SWIG dependencies
      # See nuget.yml in SWIG github repo
      shell: powershell
      run: |
          nuget install Bison -Version 3.7.4  -OutputDirectory ${{env.BISON_ROOT}}
          nuget install PCRE2 -Version 10.39  -OutputDirectory ${{env.PCRE2_ROOT}}

    - name: Compile and install [customized] SWIG 4.2.0b
      shell: powershell
      # TODO : Use a tagged realease (not the master branch)
      run: |
        mkdir swig_src
        cd swig_src
        git clone https://github.com/fabien-ors/swig.git
        cd swig
        $env:PATH="${{env.BISON_ROOT}}\Bison.3.7.4\bin;" + $env:PATH
        $PCRE_PATH="${{env.PCRE2_ROOT}}\PCRE2.10.39.0"
        cmake -B${{env.BUILD_DIR}} -G "Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX:PATH=${{env.SWIG_ROOT}} -DCMAKE_C_FLAGS="/DPCRE2_STATIC" -DCMAKE_CXX_FLAGS="/DPCRE2_STATIC" -DPCRE2_INCLUDE_DIR="$PCRE_PATH/include" -DPCRE2_LIBRARY="$PCRE_PATH/lib/pcre2-8-static.lib"
        cmake --build ${{env.BUILD_DIR}} --config Release
        cmake --install ${{env.BUILD_DIR}} --config Release

########################################################################################################
# Boost headers download and unzip

    - name : Download and uncompressed Boost headers
      run: |
        mkdir ${{env.BOOST_ROOT}}
        curl --progress-bar --location --output ${{env.BOOST_ROOT}}/download.tar.bz2 ${{env.BOOST_URL}}
        7z -o${{env.BOOST_ROOT}} x ${{env.BOOST_ROOT}}/download.tar.bz2 -y -bd
        7z -o${{env.BOOST_ROOT}} x ${{env.BOOST_ROOT}}/download.tar -y -bd
        cd ${{env.BOOST_ROOT}} && cp -r boost_*/* .

    - name : Build the package and save generated file name in the environment
      run : |
        cmake -B${{env.BUILD_DIR}} -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE:STRING=${{env.BUILD_TYPE}} -DBUILD_R=ON -DBUILD_PYTHON=OFF -DSWIG_EXECUTABLE=${{env.SWIG_ROOT}}/bin/swig -DBoost_ROOT=${{env.BOOST_ROOT}} -DUSE_HDF5=OFF
        cmake --build ${{env.BUILD_DIR}} --target r_install
        $PKG_PATH = Get-ChildItem -Path "${{env.BUILD_DIR}}/r/${{env.BUILD_TYPE}}/gstlearn_*.zip" -File
        echo "MY_PKG=$PKG_PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - uses: actions/upload-artifact@v3
      # Use specific artifact identifier for publishing all R versions
      with:
        name: windows-package-${{matrix.r_version}}
        path: ${{ env.MY_PKG }}
    
  publish:
    needs: build
    # Only ubuntu can upload to CRAN easily (ssh)
    runs-on: ubuntu-latest
    
    steps:
    - uses: fabien-ors/cran-publish-action@v1
      with:
        host: ${{ secrets.CG_HOST }}
        username: ${{ secrets.CG_USR }}
        password: ${{ secrets.CG_PWD }}
        repo-path: "/var/www/html/cran"

    # Delete the artifacts (for freeing storage space under github)
    - uses: geekyeggo/delete-artifact@v2
      with:
        name: windows-package-*