name: publish_python_windows-2019

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'     
        required: false
        default: ''  
env:
  BUILD_TYPE: Release
  BUILD_DIR : build
  PROG_ROOT : C:\hostedtoolcache\windows   
  BOOST_ROOT: boost
  BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download
  HDF5_ROOT : hdf5 #do not use "." in the name 
  HDF5_URL : "https://www.hdfgroup.org/package/cmake-hdf5-1-12-1-zip/?wpdmdl=15723"
  HDF5_VERSION : hdf5-1.12.1
  DOXYGEN_ROOT : Doxygen
  DOXYGEN_URL : https://www.doxygen.nl/files/doxygen-1.9.3.windows.x64.bin.zip
  COMPILE_VERSION : '"Visual Studio 16 2019"' #Because cmake -G needs " "
  PYTHON3_PREF : C:\hostedtoolcache\windows\Python
  PYTHON3_SUFF : x86
jobs:
   
  build:
    runs-on: windows-2019
    strategy :
      matrix:
       python: 
         # - ["cp310","3.10.2"]
         # - ["cp39","3.9.10"]
          - ["cp38","3.8.10"]
         # - ["cp37","3.7.9"]
       windows-type :
          - ["win_amd64", "x64"]
          - ["win32","x86"]
   
         
    steps:
    - uses: actions/checkout@v2

#####################################################################################################
# Create variables to setup python version and modify PATH

    - name : Create PYTHONPATH
      run : |
        echo ("PYTHONPATH=${{ env.PYTHON3_PREF }}\${{ matrix.python[1] }}\${{ matrix.windows-type[1] }}")>> $env:GITHUB_ENV
      
    - name : Setup python.exe 
      run : echo ("PYTHON3=${{env.PYTHONPATH}}\python3.exe") >> $env:GITHUB_ENV
 
    - name : Modify PATH #to avoid a warning at cmake configuration
      run : |
        echo "${{env.PYTHONPATH}}" >> $GITHUB_PATH        

#####################################################################################################
# HDF5 download and install

    - name : Download and install HDF5
      # | offers the possibility to run several command in 1 run (take care to indentation)
      run: | 
        mkdir ${{env.HDF5_ROOT}}
        curl --progress-bar --location --output ${{env.HDF5_ROOT}}/download.zip ${{env.HDF5_URL}}	
        7z x ${{env.HDF5_ROOT}}/download.zip
        cd CMake-${{env.HDF5_VERSION}}
        mkdir build
        cd build
        cmake -G ${{env.COMPILE_VERSION}} -DHDF5_GENERATE_HEADERS:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=OFF -DDEFAULT_API_VERSION:STRING=v110 -DCMAKE_BUILD_TYPE:STRING=Release -DHDF5_BUILD_FORTRAN:BOOL=OFF -DHDF5_BUILD_CPP_LIB:BOOL=ON -DHDF5_BUILD_JAVA:BOOL=OFF -DCMAKE_INSTALL_PREFIX:PATH=${{env.PROG_ROOT}}/${{env.HDF5_ROOT}} -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF -DHDF5_ENABLE_Z_LIB_SUPPORT:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DHDF5_BUILD_TOOLS:BOOL=OFF ../${{env.HDF5_VERSION}}
        cmake --build . --target all --config Release -- -j 2
        cmake --build . --target install --config Release

########################################################################################################
# Doxygen download and unzip

    - name : Download and install Doxygen  
      run: |
        mkdir ${{env.DOXYGEN_ROOT}}
        cd ${{env.DOXYGEN_ROOT}}
        mkdir bin
        cd .. 
        curl --progress-bar --output ${{env.DOXYGEN_ROOT}}/download.zip ${{env.DOXYGEN_URL}}
        7z -o${{env.DOXYGEN_ROOT}}/bin x ${{env.DOXYGEN_ROOT}}/download.zip

########################################################################################################
# Boost .h download and unzip

    - name : Download and uncompressed Boost
      run: |
        mkdir ${{env.BOOST_ROOT}}
        curl --progress-bar --location --output ${{env.BOOST_ROOT}}/download.tar.bz2 ${{env.BOOST_URL}}
        7z -o${{env.BOOST_ROOT}} x ${{env.BOOST_ROOT}}/download.tar.bz2 -y -bd
        7z -o${{env.BOOST_ROOT}} x ${{env.BOOST_ROOT}}/download.tar -y -bd
        cd ${{env.BOOST_ROOT}} && cp -r boost_*/* .
   
########################################################################################################
# Configuration to prepare compilation  

    - name : Configure Cmake
      run : |
       cmake -B${{env.BUILD_DIR}} -G ${{env.COMPILE_VERSION}} -DBoost_ROOT=${{env.BOOST_ROOT}} -DDoxygen_ROOT=${{env.DOXYGEN_ROOT}} -DHDF5_ROOT:PATH=${{env.PROG_ROOT}}/${{env.HDF5_ROOT}}  -DCMAKE_C_FLAGS="-DH5_USE_110_API"  -DPython3_ROOT_DIR=${{env.PYTHONPATH}} 

   
########################################################################################################
# Installation of wheel (to build wheel) and twine (to upload package on pypi)
    - name : Install wheel and twine
      run: |
       ${{env.PYTHON3}} -m pip install wheel
       ${{env.PYTHON3}} -m pip install twine 

########################################################################################################
# Compilation (gstlearn and python package


    - name : Library compilation
      run : cmake --build ${{env.BUILD_DIR}} --target python_install --config Release
#-j 2

########################################################################################################
# Build and upload wheel
 
    - name : Build and upload wheel
      run: |
        cd ${{env.BUILD_DIR}}\python\${{env.BUILD_TYPE}}
        ${{env.PYTHON3}} setup.py bdist_wheel --python-tag=${{matrix.python}}[0] --plat-name=${{matrix.windows-type[0]}}
        ${{env.PYTHON3}} -m twine upload dist\* 
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_TEST_TOKEN }}
        TWINE_REPOSITORY: testpypi



   


   

