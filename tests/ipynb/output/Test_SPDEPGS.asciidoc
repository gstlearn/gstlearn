== Pluri-Gaussian 2D

== 0. Preamble

[source, javascript]
----
%%javascript
IPython.OutputArea.prototype._should_scroll = function(lines) {
    // Remove Scrollbar in outputs
    return false;
}
----


----<IPython.core.display.Javascript object>----

This tutorial requires to install

* gstlearn
* numpy
* pandas
* matplotlib

[source, ipython3]
----
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import gstlearn as gl
import gstlearn.plot as gp
import os
----

== 1. Prepare the basic gstlearn objects

Initial objects are located in a specific Directory which is defined in
the next Container operation. Note that his operation will modify
automatically all the names of the Files retreived using Serialize /
Deserialize operation (not when reading using CSV). Also note that the
Container name must be ended using a ``/'' (as its serves as a
Directory).

[source, ipython3]
----
ndim = 2
gl.ASpaceObject.defineDefaultSpace(gl.ESpaceType.SPACE_RN,ndim)
----

== Load the data file

This Load is performed starting from a CSV file.

[source, ipython3]
----
dataDir = os.path.join(os.getenv('GSTLEARN_DATA'),"BRGM")
datCat = pd.read_csv(os.path.join(dataDir,"Nitrates_LANU.csv"),sep=";")
datCat.head()
----


----
[cols=",,,,,,",options="header",]
|================================================
| |X |Y |LANU |HyGeo |NO3 |BG
|0 |428575.6629 |5.541444e+06 |2 |1 |0.5 |-99.0
|1 |431573.6549 |5.542124e+06 |2 |1 |150.0 |-99.0
|2 |431565.6549 |5.542160e+06 |2 |1 |150.0 |-99.0
|3 |435820.6447 |5.543920e+06 |3 |1 |78.0 |-99.0
|4 |435955.6443 |5.543910e+06 |3 |1 |64.0 |-99.0
|================================================
----

== Loading polygon from a file

The polygon is created by deserializing the Neutral Polygon File
(located in data Directory)

[source, ipython3]
----
poly = gl.Polygons.createFromNF(os.path.join(dataDir,"poly_LANU.ascii"))
poly
----


----
Polygons
--------
Number of Polygon Sets = 1----

== Creation of the gstlearn data base

[source, ipython3]
----
dat = gl.Db()
fields = ["X","Y","LANU"]
dat[fields] = datCat[fields].values
----

== Specification of the role of each variable (named ``locators'' in gstlearn)

[source, ipython3]
----
dat.setLocators(["X","Y"],gl.ELoc.X) #Coordinates
dat.setLocator("LANU",gl.ELoc.Z) #Variable of interest
dat
----


----
Data Base Characteristics
=========================

Data Base Summary
-----------------
File is organized as a set of isolated points
Space dimension              = 2
Number of Columns            = 3
Maximum Number of UIDs       = 3
Total number of samples      = 1691

Variables
---------
Column = 0 - Name = X - Locator = x1
Column = 1 - Name = Y - Locator = x2
Column = 2 - Name = LANU - Locator = z1----

== Creation of the output grid

The output grid will contain 47 x 101 nodes. It is built to cover the
data file plus an extension of 10000 x 10000.

[source, ipython3]
----
Result = gl.DbGrid.createCoveringDb(dat,[47,101],[],[],[50000,50000])
----

== Add a selection (mask the cells outside the polygon)

[source, ipython3]
----
gl.db_polygon(Result,poly)
ax = gp.grid(Result,name="Polygon*",usesel=False,flagColorBar=False,figsize=[10,10],
             title="Initial information")
ax = gp.point(dat,"LANU",size=2,ax=ax)
ax = gp.polygon(poly,end_plot=True,linewidth=1,edgeColor="r",ax=ax)
----


----
![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_18_0.png)
----

== 2. Computation of the proportions

== 2.1 Compute global proportions (for information)

[source, ipython3]
----
propGlob = gl.dbStatisticsFacies(dat)
ncat = len(propGlob)
for i in range(ncat):
    print("Proportion of facies "+str(i+1),"=",propGlob[i])
----


----
Proportion of facies 1 = 0.2726197516262567
Proportion of facies 2 = 0.46954464813719693
Proportion of facies 3 = 0.046126552335895916
Proportion of facies 4 = 0.205204021289178
Proportion of facies 5 = 0.006505026611472502
----

== 2.2 Compute local proportions

The next parts will be simplified in a future dedicated API

*2.2.1 Creation of the spatial regularization model for proportions*

[source, ipython3]
----
model = gl.Model.createFromDb(Result)
cova = gl.CovAniso.createIsotropic(model.getContext(),gl.ECov.BESSEL_K,range=50000.,param=2.,sill=1.,) 
model.addCov(cova)
----

[source, ipython3]
----
err = gl.db_proportion_estimate(dat,Result,model)
----

[source, ipython3]
----
dbfmt = gl.DbStringFormat()
dbfmt.setFlags(flag_stats=True)
dbfmt.setNames(["Prop.*"])
Result.display(dbfmt)
----


----

Data Base Grid Characteristics
==============================

Data Base Summary
-----------------
File is organized as a regular grid
Space dimension              = 2
Number of Columns            = 8
Maximum Number of UIDs       = 8
Total number of samples      = 4747
Number of active samples     = 422

Grid characteristics:
---------------------
Origin : 306764.2835218227.694
Mesh   :   5749.747  4261.311
Number :         47       101

Data Base Statistics
--------------------
4 - Name Prop.1 - Locator p1
 Nb of data          =       4747
 Nb of active values =        422
 Minimum value       =      0.031
 Maximum value       =      0.796
 Mean value          =      0.263
 Standard Deviation  =      0.132
 Variance            =      0.018
5 - Name Prop.2 - Locator p2
 Nb of data          =       4747
 Nb of active values =        422
 Minimum value       =      0.020
 Maximum value       =      0.882
 Mean value          =      0.479
 Standard Deviation  =      0.182
 Variance            =      0.033
6 - Name Prop.3 - Locator p3
 Nb of data          =       4747
 Nb of active values =        422
 Minimum value       =      0.003
 Maximum value       =      0.273
 Mean value          =      0.049
 Standard Deviation  =      0.041
 Variance            =      0.002
7 - Name Prop.4 - Locator p4
 Nb of data          =       4747
 Nb of active values =        422
 Minimum value       =      0.007
 Maximum value       =      0.933
 Mean value          =      0.203
 Standard Deviation  =      0.167
 Variance            =      0.028
8 - Name Prop.5 - Locator p5
 Nb of data          =       4747
 Nb of active values =        422
 Minimum value       =      0.001
 Maximum value       =      0.047
 Mean value          =      0.006
 Standard Deviation  =      0.007
 Variance            =      0.000

Variables
---------
Column = 0 - Name = x1 - Locator = x1
Column = 1 - Name = x2 - Locator = x2
Column = 2 - Name = Polygon - Locator = sel
Column = 3 - Name = Prop.1 - Locator = p1
Column = 4 - Name = Prop.2 - Locator = p2
Column = 5 - Name = Prop.3 - Locator = p3
Column = 6 - Name = Prop.4 - Locator = p4
Column = 7 - Name = Prop.5 - Locator = p5
 ----

== Display the results

[source, ipython3]
----
for i in range(ncat):
    ax = gp.grid(Result,name="Prop."+str(i+1),end_plot=False,title="Proportion Facies #"+str(i+1),
                figsize=[10,10])
    gp.point(dat,size=0.5,color="black",ax=ax)
    dat.addSelectionByLimit("LANU",gl.Limits((i+1,i+1)),"SelPoint")
    gp.point(dat,size=0.8,ax=ax,color="red")
    dat.deleteColumn("SelPoint")
    gp.polygon(poly,end_plot=True,linewidth=1,edgeColor="r",ax=ax)
----


----
![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_28_0.png)

![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_28_1.png)

![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_28_2.png)

![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_28_3.png)

![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_28_4.png)
----

Creating the environment to infer the Rule. It uses a variogram
calculated over very few lags close to the origin.

[source, ipython3]
----
varioParam = gl.VarioParam()
dirparam = gl.DirParam.create(ndim=ndim, npas = 2, dpas=100)
varioParam.addDir(dirparam);
ruleprop = gl.RuleProp.createFromDb(Result);
ruleprop.fit(dat, varioParam, 1);
ngrf = ruleprop.getRule().getGRFNumber()
print("Number of GRF =",ngrf)
----


----
Number of GRF = 1
----

[source, ipython3]
----
ax=gp.rule(ruleprop.getRule())
----


----
![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_31_0.png)
----

[source, ipython3]
----
dirparam = gl.DirParam.create(ndim=ndim, npas = 19, dpas=1000)
covparam = gl.VarioParam();
covparam.addDir(dirparam);
cov = gl.variogram_pgs(dat,covparam,ruleprop);
----

[source, ipython3]
----
cov.display()
----


----

Non-centered Covariance characteristics
=======================================
Number of variable(s)       = 1
Number of direction(s)      = 1
Space dimension             = 2
Variance-Covariance Matrix     1.000

Direction #1
------------
Number of lags              = 19
Direction coefficients      =      1.000     0.000
Direction angles (degrees)  =      0.000     0.000
Tolerance on direction      =     90.000 (degrees)
Calculation lag             =   1000.000
Tolerance on distance       =     50.000 (Percent of the lag value)

For variable 1
      Rank    Npairs  Distance     Value
       -19  9732.000 17998.608     0.017
       -18  9506.000 17006.901    -0.017
       -17  8885.000 16006.927    -0.017
       -16  8815.000 15002.837    -0.017
       -15  8068.000 14003.176     0.000
       -14  8019.000 12999.786     0.000
       -13  7684.000 12002.331    -0.052
       -12  7363.000 11000.802    -0.017
       -11  6935.000 10007.370    -0.039
       -10  6310.000  9006.739    -0.039
        -9  5975.000  8003.635    -0.017
        -8  5615.000  7013.830    -0.017
        -7  5035.000  6014.805    -0.052
        -6  4397.000  5019.156     0.000
        -5  3682.000  4012.782    -0.073
        -4  3011.000  3019.326     0.000
        -3  2345.000  2038.996     0.094
        -2  1290.000  1055.802     0.240
        -1   238.000   307.621     0.781
         0  1691.000     0.000     1.000
         1   238.000  -307.621     0.781
         2  1290.000 -1055.802     0.240
         3  2345.000 -2038.996     0.094
         4  3011.000 -3019.326     0.000
         5  3682.000 -4012.782    -0.073
         6  4397.000 -5019.156     0.000
         7  5035.000 -6014.805    -0.052
         8  5615.000 -7013.830    -0.017
         9  5975.000 -8003.635    -0.017
        10  6310.000 -9006.739    -0.039
        11  6935.000-10007.370    -0.039
        12  7363.000-11000.802    -0.017
        13  7684.000-12002.331    -0.052
        14  8019.000-12999.786     0.000
        15  8068.000-14003.176     0.000
        16  8815.000-15002.837    -0.017
        17  8885.000-16006.927    -0.017
        18  9506.000-17006.901    -0.017
        19  9732.000-17998.608     0.017
 ----

We extract the experimental variograms of each GRF.

[source, ipython3]
----
vario1 = gl.Vario.createReduce(cov,[0],gl.VectorInt(),True)
if ngrf > 1:
    vario2 = gl.Vario(cov)
    vario2.reduce([1],gl.VectorInt(),True)
----

[source, ipython3]
----
vario1.display()
if ngrf > 1:
    vario2.display()
----


----

Variogram characteristics
=========================
Number of variable(s)       = 1
Number of direction(s)      = 1
Space dimension             = 2
Variance-Covariance Matrix     1.000

Direction #1
------------
Number of lags              = 19
Direction coefficients      =      1.000     0.000
Direction angles (degrees)  =      0.000     0.000
Tolerance on direction      =     90.000 (degrees)
Calculation lag             =   1000.000
Tolerance on distance       =     50.000 (Percent of the lag value)

For variable 1
      Rank    Npairs  Distance     Value
         0   238.000   307.621     0.219
         1  1290.000  1055.802     0.760
         2  2345.000  2038.996     0.906
         3  3011.000  3019.326     1.000
         4  3682.000  4012.782     1.073
         5  4397.000  5019.156     1.000
         6  5035.000  6014.805     1.052
         7  5615.000  7013.830     1.017
         8  5975.000  8003.635     1.017
         9  6310.000  9006.739     1.039
        10  6935.000 10007.370     1.039
        11  7363.000 11000.802     1.017
        12  7684.000 12002.331     1.052
        13  8019.000 12999.786     1.000
        14  8068.000 14003.176     1.000
        15  8815.000 15002.837     1.017
        16  8885.000 16006.927     1.017
        17  9506.000 17006.901     1.017
        18  9732.000 17998.608     0.983
 ----

We now fit the model of each GRF considered as independent. The fit is
performed under the constraint that the sill should be 1.

[source, ipython3]
----
ctxt = gl.CovContext(1,2) # use default space
option = gl.Option_AutoFit()
constraints = gl.Constraints()
constraints.setConstantSillValue(1.)
covs  = [gl.ECov.BESSEL_K, gl.ECov.EXPONENTIAL]

modelPGS1 = gl.Model(ctxt)
modelPGS1.fit(vario1,covs,False,option,constraints)
modelPGS1.display()

if ngrf > 1:
    modelPGS2 = gl.Model(ctxt)
    modelPGS2.fit(vario2,covs,False,option,constraints)
    modelPGS2.display()
else:
    modelPGS2 = None
----


----

Model characteristics
=====================
Space dimension              = 2
Number of variable(s)        = 1
Number of basic structure(s) = 1
Number of drift function(s)  = 0
Number of drift equation(s)  = 0

Covariance Part
---------------
K-Bessel (Third Parameter = 0.966511)
- Sill         =      1.000
- Range        =   1743.965
- Theo. Range  =    512.087
Total Sill     =      1.000
 ----

For each GRF, we can plot the experimental variogram as well as the
fitted model.

[source, ipython3]
----
ax=gp.varmod(vario1,modelPGS1)
if ngrf > 1:
    ax=gp.varmod(vario2,modelPGS2)
----


----
![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_40_0.png)
----

In this paragraph, we compare the experimental indicator variogram to
the one derived from the Model of the underlying GRFs.

[source, ipython3]
----
dirparamindic = gl.DirParam.create(ndim=ndim, npas=19, dpas=1000)
varioparamindic = gl.VarioParam()
varioparamindic.addDir(dirparamindic)
varioindic = gl.Vario(varioparamindic,dat)
err = varioindic.computeIndic()
----

[source, ipython3]
----
varioindic2 = gl.model_pgs(dat, varioparamindic, ruleprop, modelPGS1, modelPGS2);
----

[source, ipython3]
----
axs=gp.varmod(varioindic,figsize=[10,10],linestyle='solid')
axs=gp.varmod(varioindic2,axs=axs,linestyle='dashed')
----


----
![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_44_0.png)
----

[source, ipython3]
----
neigh = gl.NeighUnique.create(2)
err = gl.simpgs(dat,Result,ruleprop,modelPGS1,modelPGS2,neigh)
----

[source, ipython3]
----
ax = gp.grid(Result,figsize=[10,10])
----


----
![png](/home/drenard/project_gstlearn/gstlearn/build/tests/ipynb/Release/Test_SPDEPGS_46_0.png)
----
