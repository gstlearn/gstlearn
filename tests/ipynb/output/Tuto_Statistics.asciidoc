[[demonstration-of-the-statistics-procedure-in-gstlearn]]
= Demonstration of the Statistics procedure in gstlearn

This file demonstrates the use of Statistics functions performed on a
Point and a Grids (in 2-D.


+*Out[1]:*+
----<IPython.core.display.Javascript object>----

[[import-packages]]
== Import packages

Defining the Grid file called _grid_. The grid contains three variables
with values generated randomly (called "SG_i")


+*Out[3]:*+
----
Data Base Grid Characteristics
==============================

Data Base Summary
-----------------
File is organized as a regular grid
Space dimension              = 2
Number of Columns            = 6
Maximum Number of UIDs       = 6
Total number of samples      = 15000

Grid characteristics:
---------------------
Origin :      0.000     0.000
Mesh   :      1.000     1.000
Number :        150       100

Variables
---------
Column = 0 - Name = rank - Locator = NA
Column = 1 - Name = x1 - Locator = x1
Column = 2 - Name = x2 - Locator = x2
Column = 3 - Name = SG1 - Locator = NA
Column = 4 - Name = SG2 - Locator = NA
Column = 5 - Name = SG3 - Locator = z1----

Defining a Point data base called _data_, covering the grid(s)
extension. The data base contains three variables generated randomly
(called "SD_i")


+*Out[4]:*+
----
Data Base Characteristics
=========================

Data Base Summary
-----------------
File is organized as a set of isolated points
Space dimension              = 2
Number of Columns            = 6
Maximum Number of UIDs       = 6
Total number of samples      = 100

Variables
---------
Column = 0 - Name = rank - Locator = NA
Column = 1 - Name = x-1 - Locator = x1
Column = 2 - Name = x-2 - Locator = x2
Column = 3 - Name = SD1 - Locator = NA
Column = 4 - Name = SD2 - Locator = NA
Column = 5 - Name = SD3 - Locator = z1----

The following plot displays the variable _SG1_ from the Grid Data Base
(in color scale) and the variable _SD1_ from the Point Data Base (in
proportional symbols).


+*Out[5]:*+
----
![png](output_10_0.png)
----

Note that in all subsequent tests, we will have to specify a set of
statistical operations. This list is defined once for all and specified
using _fromKeys_ utility to make the script more legible.

In the next paragraph, we calculate some monovariate statistics on the
variables contained in the Point Data Base. For all methods, several
calls are available, depending on: - how the target variables are
specified - how the results are produced


+*Out[7]:*+
----
Monovariate Statistics on Variables
-----------------------------------
- Number of Rows    = 3
- Number of Columns = 3

                Count       Mean   St. Dev.
       SD1    100.000      0.161      1.028
       SD2    100.000     -0.293      1.020
       SD3    100.000      0.118      0.910----

The next command produces the correlation matrix of the selected
variables.


+*Out[8]:*+
----- Number of rows    = 3
- Number of columns = 3
               [,  0]    [,  1]    [,  2]
     [  0,]     1.000                    
     [  1,]    -0.006     1.000          
     [  2,]    -0.186     0.002     1.000----

The following command prints the statistics on the selected variables
(including the correlation matrix).


+*Out[9]:*+
----
         Number        Mean    St. Dev. 
 SD1         100       0.161       1.028 
 SD2         100      -0.293       1.020 
 SD3         100       0.118       0.910 
 
 Number of isotopic active samples = 100
 Correlation matrix
                    [,1]        [,2]        [,3] 
        [1,]       1.000      -0.006      -0.186 
        [2,]      -0.006       1.000       0.002 
        [3,]      -0.186       0.002       1.000 
 
 ----

The following command provides an array containaing the evaluation of a
given Statistical calculation for a set of variables contained in a Db.

If 'flagMono' is set to False, this satistics is calculated for each
variable in turn. Otherwise this statistics is calculated on each
variable, based on the only samples where one of the other variables is
defined. In that case, the dimension of the output is equal to the
squzre of the number of target variables.

In our case, there will be no difference in the contents of these two
outputs as the data set if Isotopic.


+*Out[10]:*+
----array([ 0.16061037, -0.29315144,  0.11773491])----


+*Out[11]:*+
----array([ 0.16061037,  0.16061037,  0.16061037, -0.29315144, -0.29315144,
       -0.29315144,  0.11773491,  0.11773491,  0.11773491])----

[[using-the-grid]]
== Using the Grid

We now calculate the statistics of the data contained in the Point Db,
per cell of the output DbGrid. This function returns the results as an
array of values (which has the dimension of the number of cells of the
output Grid).

For those calculations, we will consider a coarse grid overlaying the
initial grid, but with meshes obtained as multiples of the initial one.


+*Out[12]:*+
----
Data Base Grid Characteristics
==============================

Data Base Summary
-----------------
File is organized as a regular grid
Space dimension              = 2
Number of Columns            = 6
Maximum Number of UIDs       = 6
Total number of samples      = 600

Grid characteristics:
---------------------
Origin :      0.000     0.000
Mesh   :      5.000     5.000
Number :         30        20

Variables
---------
Column = 0 - Name = rank - Locator = NA
Column = 1 - Name = x1 - Locator = x1
Column = 2 - Name = x2 - Locator = x2
Column = 3 - Name = SG1 - Locator = NA
Column = 4 - Name = SG2 - Locator = NA
Column = 5 - Name = SG3 - Locator = z1----


+*Out[14]:*+
----
![png](output_26_0.png)
----

If may be more handy to store the statistic (say the _Mean_) directly as
new variables in the output Grid File. These calculations will be
performed for each input variable (Z_Locator) in the input file.

Obviously the results for the first variable, is similar to the previous
calculation (as demonstrated using the scatter plot). But the statistics
for the other variables have been calculated simultaneously.


+*Out[16]:*+
----
![png](output_30_0.png)
----

More interesting is the ability to dilate the size of the cell while
performing the calculations. Here, each grid node is dilated with a
_ring_ extension of 2: the initial node extension is multiplied by 5. So
very few cells have no data included in their dilated dimension.


+*Out[18]:*+
----
![png](output_33_0.png)
----

This same feature cab be used to calculate the dispersion variance of
blocks (say the cells of the fine grid) whitin panels (say the cells of
the coarse grid).


+*Out[20]:*+
----
![png](output_36_0.png)
----
