/******************************************************************************/
/*                                                                            */
/*                            gstlearn C++ Library                            */
/*                                                                            */
/* Copyright (c) (2023) MINES Paris / ARMINES                                 */
/* Authors: gstlearn Team                                                     */
/* Website: https://gstlearn.org                                              */
/* License: BSD 3-clause                                                      */
/*                                                                            */
/******************************************************************************/

#include "Basic/File.hpp"

#include <iostream>
#include "LinearOp/CholeskySparseInv.hpp"

/**
 * This file is meant to perform any test that needs to be coded for a quick trial
 * It will be compiled but not run nor diff'ed.
 */
int main(int argc, char *argv[])
{
  std::stringstream sfn;
  sfn << gslBaseName(__FILE__) << ".out";
  StdoutRedirect sr(sfn.str(), argc, argv);

  using SparseMatrix = Eigen::SparseMatrix<double, Eigen::ColMajor>;

  int Q_inner[]  = {0, 1, 5, 0, 1, 2, 6, 1, 2, 3, 7, 2, 3, 4, 8, 3, 4, 9, 0, 5, 6, 10, 1, 5, 6, 7, 11, 2,
                    6, 7, 8, 12, 3, 7, 8, 9, 13, 4, 8, 9, 14, 5, 10, 11, 15, 6, 10, 11, 12, 16, 7, 11,
                    12, 13, 17, 8, 12, 13, 14, 18, 9, 13, 14, 19, 10, 15, 16, 20, 11, 15, 16, 17,
                    21, 12, 16, 17, 18, 22, 13, 17, 18, 19, 23, 14, 18, 19, 24, 15, 20, 21, 16, 20,
                    21, 22, 17, 21, 22, 23, 18, 22, 23, 24, 19, 23, 24};
  int Q_outer[]  = {0, 3, 7, 11, 15, 18, 22, 27, 32, 37, 41, 45, 50, 55, 60, 64, 68, 73, 78, 83,
                    87, 90, 94, 98, 102, 105};
  double Q_val[] = {5.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0,
                    5.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0,
                    -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0,
                    -1.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0,
                    -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0,
                    -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0,
                    -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0,
                    5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, 5.0, -1.0,
                    -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, 5.0};
  Eigen::VectorXd Qinv_true(105);
  Qinv_true << 0.220593295593296, 0.051483238983239, 0.051483238983239, 0.051483238983239, 0.233306970806971, 0.0547785547785548, 0.0602730602730603, 0.0547785547785548, 0.234139471639472, 0.0547785547785548, 0.0611402486402486, 0.0547785547785548, 0.233306970806971, 0.051483238983239, 0.0602730602730603, 0.051483238983239, 0.220593295593296, 0.051483238983239, 0.051483238983239, 0.233306970806971, 0.0602730602730603, 0.0547785547785548, 0.0602730602730603, 0.0602730602730603, 0.25021645021645, 0.0652680652680653, 0.0652680652680653, 0.0611402486402486, 0.0652680652680653, 0.251621989121989, 0.0652680652680653, 0.0664335664335664, 0.0602730602730603, 0.0652680652680653, 0.25021645021645, 0.0602730602730603, 0.0652680652680653, 0.051483238983239, 0.0602730602730603, 0.233306970806971, 0.0547785547785548, 0.0547785547785548, 0.234139471639472, 0.0611402486402486, 0.0547785547785548, 0.0652680652680653, 0.0611402486402486, 0.251621989121989, 0.0664335664335664, 0.0652680652680653, 0.0664335664335664, 0.0664335664335664, 0.253146853146853, 0.0664335664335664, 0.0664335664335664, 0.0652680652680653, 0.0664335664335664, 0.251621989121989, 0.0611402486402486, 0.0652680652680653, 0.0547785547785548, 0.0611402486402486, 0.234139471639472, 0.0547785547785548, 0.0547785547785548, 0.233306970806971, 0.0602730602730603, 0.051483238983239, 0.0652680652680653, 0.0602730602730603, 0.25021645021645, 0.0652680652680653, 0.0602730602730603, 0.0664335664335664, 0.0652680652680653, 0.251621989121989, 0.0652680652680653, 0.0611402486402486, 0.0652680652680653, 0.0652680652680653, 0.25021645021645, 0.0602730602730603, 0.0602730602730603, 0.0547785547785548, 0.0602730602730603, 0.233306970806971, 0.051483238983239, 0.051483238983239, 0.220593295593296, 0.051483238983239, 0.0602730602730603, 0.051483238983239, 0.233306970806971, 0.0547785547785548, 0.0611402486402486, 0.0547785547785548, 0.234139471639472, 0.0547785547785548, 0.0602730602730603, 0.0547785547785548, 0.233306970806971, 0.051483238983239, 0.051483238983239, 0.051483238983239, 0.220593295593296;

  int Q_ncol = 25;
  int Q_nnz  = 105;

  SparseMatrix Q = Eigen::Map<SparseMatrix>(Q_ncol, Q_ncol, Q_nnz, Q_outer, Q_inner, Q_val);

  auto llt = Eigen::SimplicialLLT<SparseMatrix>(Q);

  SparseMatrix Qinv        = partial_inverse(llt, Q);
  Eigen::VectorXd Qinv_val = Eigen::Map<Eigen::VectorXd>(Qinv.valuePtr(), Q_nnz);

  std::cout << "The error in the partial inverse is " << (Qinv_val - Qinv_true).norm() << "!" << std::endl;

  return (0);
}
